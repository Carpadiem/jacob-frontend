/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 ./StylingGarage.gltf --types --transform --shadows --keepnames --keepmeshes --keepmaterials 
Files: ./StylingGarage.gltf [2.99KB] > StylingGarage-transformed.glb [3.28KB] (-10%)
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, PerspectiveCamera } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh
  }
  materials: {
    floor: THREE.MeshStandardMaterial
  }
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('assets/3d/transformed_gltf/scenes/StylingGarage/StylingGarage-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <pointLight
        castShadow
        shadow-bias={-0.0002}
        shadow-radius={2}
        shadow-mapSize={1024}
        name='Light'
        intensity={60}
        decay={2}
        position={[4.076, 5.904, -1.005]}
        rotation={[-1.839, 0.602, 1.932]}
      />
      <pointLight
        castShadow
        shadow-bias={-0.0002}
        shadow-radius={2}
        shadow-mapSize={1024}
        name='Light001'
        intensity={60}
        decay={2}
        position={[-8.732, 2.484, -1.005]}
        rotation={[-1.839, 0.602, 1.932]}
      />

      <PerspectiveCamera name='Camera' makeDefault far={1000} near={0.01} fov={31.417} position={[0, 1, 7]} />
      <mesh name='Plane' castShadow receiveShadow geometry={nodes.Plane.geometry} material={materials.floor} />
    </group>
  )
}

useGLTF.preload('assets/3d/transformed_gltf/scenes/StylingGarage/StylingGarage-transformed.glb')
