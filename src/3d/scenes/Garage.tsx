/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 ./StylingGarage.gltf --types --transform --shadows --keepnames --keepmeshes --keepmaterials 
Files: ./StylingGarage.gltf [2.99KB] > StylingGarage-transformed.glb [3.28KB] (-10%)
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, PerspectiveCamera } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame, useThree } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh
  }
  materials: {
    floor: THREE.MeshLambertMaterial
  }
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('3d/gltf/scenes/StylingGarage/StylingGarage-transformed.glb') as GLTFResult

  // three
  useThree((state)=>{
    state.camera.lookAt(new THREE.Vector3(1.5,1,0))
  })

  // return
  return (
    <group {...props} dispose={null}>
      <pointLight castShadow shadow-bias={-0.0002} shadow-radius={2} shadow-mapSize={1024} name='Light' intensity={60} decay={2.2} position={[4.076, 5.904, -1.005]} />
      {/* <pointLight castShadow shadow-bias={-0.0002} shadow-radius={2} shadow-mapSize={1024} name='Light001' intensity={60} decay={2} position={[-8.732, 2.484, -1.005]} rotation={[-1.839, 0.602, 1.932]} /> */}

      <PerspectiveCamera name='Camera' makeDefault far={1000} near={0.1} fov={30} position={[-3, 1.3, -6]} />
      <mesh name='Plane' castShadow receiveShadow geometry={nodes.Plane.geometry} material={materials.floor} position={[0, .205, 0]} />
    </group>
  )
}

// useGLTF.preload('3d/gltf/scenes/StylingGarage/StylingGarage-transformed.glb')
