/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 ./Autosalon.gltf --types --transform --shadows --keepnames --keepmeshes --keepmaterials 
Files: ./Autosalon.gltf [10.52KB] > Autosalon-transformed.glb [403.56KB] (-3736%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF, PerspectiveCamera } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { degToRad } from 'three/src/math/MathUtils'

type GLTFResult = GLTF & {
  nodes: {
    Plane_1: THREE.Mesh
    Plane_2: THREE.Mesh
    Cylinder_1: THREE.Mesh
    Cylinder_2: THREE.Mesh
    Cylinder_3: THREE.Mesh
  }
  materials: {
    floor: THREE.MeshStandardMaterial
    wall: THREE.MeshStandardMaterial
    stand: THREE.MeshStandardMaterial
    metal: THREE.MeshStandardMaterial
    wood_floor: THREE.MeshStandardMaterial
  }
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('3d/gltf/scenes/Autosalon/Autosalon-transformed.glb') as GLTFResult

  React.useEffect(() => {
    materials.floor.bumpMap = materials.floor.normalMap
    materials.floor.bumpScale = 0.1
    materials.floor.normalMap = null

    materials.wall.bumpMap = materials.wall.normalMap
    materials.wall.bumpScale = 0.1
    materials.wall.normalMap = null

    materials.wood_floor.bumpMap = materials.wood_floor.normalMap
    materials.wood_floor.bumpScale = 0.1
    materials.wood_floor.normalMap = null
  }, [])

  return (
    <group {...props} dispose={null}>
      <PerspectiveCamera name='Camera' makeDefault far={1000} near={0.01} fov={20.102} position={[0, 1.7, 10.018]} rotation={[degToRad(-5), degToRad(0), degToRad(0)]} />

      {/* <pointLight name='Point' intensity={50} decay={2} position={[0, 3, 0]} castShadow receiveShadow shadow-mapSize={1024} shadow-bias={-0.0003} shadow-radius={5} shadow-autoUpdate /> */}

      <mesh name='Plane_1' castShadow receiveShadow geometry={nodes.Plane_1.geometry} material={materials.floor} />
      <mesh name='Plane_2' castShadow receiveShadow geometry={nodes.Plane_2.geometry} material={materials.wall} />
      <mesh name='Cylinder_1' castShadow receiveShadow geometry={nodes.Cylinder_1.geometry} material={materials.stand} />
      <mesh name='Cylinder_2' castShadow receiveShadow geometry={nodes.Cylinder_2.geometry} material={materials.metal} />
      <mesh name='Cylinder_3' castShadow receiveShadow geometry={nodes.Cylinder_3.geometry} material={materials.wood_floor} />
    </group>
  )
}

// useGLTF.preload('3d/gltf/scenes/Autosalon/Autosalon-transformed.glb')
